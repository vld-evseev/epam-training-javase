package training.tasks.unit2.task1;

import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

public class PenTest {
    @Test
    public void write() throws Exception {
        Pen pen = new Pen();
        pen.write("Message");
    }

    @Test
    public void getColor() throws Exception {
        Pen pen = new Pen();
        assertEquals(Color.BLACK, pen.getColor());
    }

    @Test
    public void setColor() throws Exception {
        Pen pen = new Pen();
        pen.setColor(Color.GREEN);
        assertEquals(Color.GREEN, pen.getColor());
    }

    @Test
    public void getFontWeight() throws Exception {
        Pen pen = new Pen();
        assertEquals(FontWeight.NORMAL, pen.getFontWeight());
    }

    @Test
    public void setFontWeight() throws Exception {
        Pen pen = new Pen();
        pen.setFontWeight(FontWeight.BOLD);
        assertEquals(FontWeight.BOLD, pen.getFontWeight());
    }

    @Test
    public void hashCodeTest() throws Exception {
        Pen pen1 = new Pen();
        Pen pen2 = new Pen();
        assertEquals(pen1.hashCode(), pen2.hashCode());

        pen2.setFontWeight(FontWeight.BOLD);
        assertNotEquals(pen1.hashCode(), pen2.hashCode());
    }

    @Test
    public void equalsTest() throws Exception {
        Pen pen1 = new Pen();
        Pen pen2 = new Pen();
        assertEquals(pen1, pen2);

        pen2.setColor(Color.BLUE);
        assertNotEquals(pen1, pen2);
    }

    @Test
    public void toStringTest() throws Exception {
        Pen pen1 = new Pen();
        Pen pen2 = new Pen();
        assertEquals(pen1.toString(), pen2.toString());
    }

}